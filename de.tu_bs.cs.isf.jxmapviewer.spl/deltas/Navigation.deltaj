delta Navigation requires Routing, Localization {
	
	modifies de.tu_bs.cs.isf.navi.NaviApp {
		adds import javax.swing.BoxLayout;
		adds import javax.swing.JSlider;
		adds import javax.swing.JLabel;
		adds import java.awt.event.ActionEvent;
		adds import java.awt.event.ActionListener;
		adds import java.awt.event.MouseEvent;
		adds import java.awt.event.MouseListener;
		adds import de.tu_bs.cs.isf.navi.routing.RoutingInformation;
		adds import org.openstreetmap.gui.jmapviewer.Coordinate;
	
		adds public javax.swing.JSlider naviSpeed;
		adds public de.tu_bs.cs.isf.navi.NaviSimulationThread naviSim;
		adds public javax.swing.JLabel naviSpeedLabel;
		adds public javax.swing.JLabel naviDirectionLabel;
		
		visibility GPSselect {public};
		
		adds private void startNavigationSimulation(de.tu_bs.cs.isf.navi.NaviApp naviApp) {
			if (naviSim != null) {
				naviSim.finish();
			}
			Coordinate startCoordinate = new Coordinate(routingInformation.getPolygonPoints().get(0)[0],
					routingInformation.getPolygonPoints().get(0)[1]);
			if (GPSselect == null) {
				GPSselect = new org.openstreetmap.gui.jmapviewer.MapMarkerDot(startCoordinate);
				mapViewer.addMapMarker(GPSselect);
			}
			GPSselect.setLat(startCoordinate.getLat());
			GPSselect.setLon(startCoordinate.getLon());
			mapViewer.setDisplayPosition(GPSselect, 17);
			mapViewer.updateUI();
	
			naviSim = new NaviSimulationThread(naviApp, mapViewer, routingInformation);
			(new Thread(naviSim)).start();
		}
	
		modifies addMenu13() {
			naviSpeed = new JSlider(JSlider.VERTICAL, 0, 100, 0);
			naviSpeed.setMajorTickSpacing(20);
			naviSpeed.setMinorTickSpacing(5);
			naviSpeed.setPaintTicks(Boolean.TRUE);
			naviSpeed.setPreferredSize(new Dimension(100, 250));
	
			JPanel naviPanel = new JPanel();
			naviPanel.setLayout(new BoxLayout(naviPanel, BoxLayout.PAGE_AXIS));
			
			JPanel outerPanel = new JPanel();
			JPanel innerPanel = new JPanel();
			innerPanel.setLayout(new BoxLayout(innerPanel, BoxLayout.PAGE_AXIS));
							
			outerPanel.add(naviSpeed);
			outerPanel.add(innerPanel);
	
			naviSpeedLabel = new JLabel("0 km/h");
			naviDirectionLabel = new JLabel("Keine Route berechnet");
			
			innerPanel.add(naviSpeedLabel);
			
			JButton speedButton = new JButton("VOLLGAS");
			speedButton.addMouseListener(new MouseListener() {
	
				public void mouseClicked(MouseEvent e) {}
	
				public void mousePressed(MouseEvent e) {
					if(naviSim != null) {
						((JButton) e.getSource()).setText("TURBO ON");
						naviSim.turbo = Boolean.TRUE;
					}
				}
	
				public void mouseReleased(MouseEvent e) {
					if(naviSim != null) {
						((JButton) e.getSource()).setText("VOLLGAS");
						naviSim.turbo = Boolean.FALSE;
					}
				}
	
				public void mouseEntered(MouseEvent e) {}
	
				public void mouseExited(MouseEvent e) {}
				
			});
			innerPanel.add(speedButton);
			
			naviPanel.add(outerPanel);
			naviPanel.add(naviDirectionLabel);
	
			menuPanelList.put("Navigation", naviPanel);
	
			final NaviApp naviApp = this;
	
			startBtn.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					final RoutingInformation oldRouting = routingInformation;
	
					new Thread(new Runnable() {
						public void run() {
							while (routingInformation == oldRouting) {
								try {
									Thread.sleep(50);
								} catch (InterruptedException e) {
								}
							}
	
							startNavigationSimulation(naviApp);
						}
	
					}).start();
	
				}
			});
			mapViewer.addMouseListener(new MouseListener() {
	
				public void mouseClicked(MouseEvent e) {
				}
	
				public void mousePressed(MouseEvent e) {
					naviSpeed.setValue(0);
					naviSpeed.updateUI();
				}
	
				public void mouseReleased(MouseEvent e) {
				}
	
				public void mouseEntered(MouseEvent e) {
				}
	
				public void mouseExited(MouseEvent e) {
				}
	
			});
	
			gpsButton.addMouseListener(new java.awt.event.MouseListener() {
				public void mouseClicked(java.awt.event.MouseEvent e) {
					naviSpeed.setValue(0);
					naviSpeed.updateUI();
				}
	
				public void mousePressed(java.awt.event.MouseEvent e) {
				}
	
				public void mouseReleased(java.awt.event.MouseEvent e) {
				}
	
				public void mouseEntered(java.awt.event.MouseEvent e) {
				}
	
				public void mouseExited(java.awt.event.MouseEvent e) {
				}
			});
		}
	
	}
	
	
	adds {
		package de.tu_bs.cs.isf.navi;

		import java.util.List;
		
		import javax.swing.JOptionPane;
		
		import org.openstreetmap.gui.jmapviewer.Coordinate;
		import org.openstreetmap.gui.jmapviewer.JMapViewer;
		
		import de.tu_bs.cs.isf.navi.routing.RoutingCoordinate;
		import de.tu_bs.cs.isf.navi.routing.RoutingInformation;
		import de.tu_bs.cs.isf.navi.routing.RoutingStepInformation;
		
		public class NaviSimulationThread implements Runnable {
		
			private boolean finish;
			private de.tu_bs.cs.isf.navi.NaviApp naviApp;
			private org.openstreetmap.gui.jmapviewer.JMapViewer map;
			private de.tu_bs.cs.isf.navi.routing.RoutingCoordinate[] coordinateList;
		
			private int currentIndex;
		
			private de.tu_bs.cs.isf.navi.routing.RoutingInformation routingInformation;
			
			private org.openstreetmap.gui.jmapviewer.Coordinate lastKnownPosition;
			private double distanceTravelled;
			private long timeRouteStarted;
			private double currentSpeed;
			private double[] currentNormal;
		
			private int stepsPerSecond;
			
			public boolean turbo;
			
			private Object lock;
		
			public NaviSimulationThread(de.tu_bs.cs.isf.navi.NaviApp app, org.openstreetmap.gui.jmapviewer.JMapViewer map, de.tu_bs.cs.isf.navi.routing.RoutingInformation ri) {
				this.naviApp = app;
				this.map = map;
				this.routingInformation = ri;
				this.stepsPerSecond = 45;
				this.currentIndex = 0;
		
				this.finish = Boolean.FALSE;
				this.turbo = Boolean.FALSE;
				this.lock = new Object();
			}
		
			public void run() {
				computeRoute();
				lastKnownPosition = new Coordinate(coordinateList[0].getLat(), coordinateList[0].getLon());
		
				this.timeRouteStarted = System.currentTimeMillis();
				long frameStart;
		
				while (stillDriving()) {
					frameStart = System.currentTimeMillis();
					driveStep();
					long frameEnd = System.currentTimeMillis();
					long sleepTime = (1000 / stepsPerSecond) - (frameEnd - frameStart);
					
					if(sleepTime < 0) {
						sleepTime = 0;
					}
					
					try {
						Thread.sleep(sleepTime);
					} catch (InterruptedException e) {
						System.out.println("NaviSimThread interrupted");
					}
				}
			}
		
			private void computeRoute() {
				List<double[]> polygon = routingInformation.getPolygonPoints();
				coordinateList = new RoutingCoordinate[polygon.size()];
				for (int i = 0; i < polygon.size(); i++) {
					coordinateList[i] = new RoutingCoordinate(polygon.get(i)[0], polygon.get(i)[1]);
				}
			}
		
			private void driveStep() {
				double speed = (double) naviApp.naviSpeed.getValue();
				if (speed == 0) {
					this.currentSpeed = 0;
					naviApp.naviSpeedLabel.setText("0 km/h");
					return;
				}
		
				Coordinate currentPosition = lastKnownPosition;
				
				speed /= 1.852d;
				speed /= 3600.0d * 60.0d;
				
				speed *= 2;
				if (turbo) speed *= 10;
				
				double distToTravel = speed / ((double) stepsPerSecond);
		
				while (distToTravel > 0) {
					currentPosition = lastKnownPosition;
					RoutingCoordinate nextCoordinate = coordinateList[currentIndex + 1];
		
					double distanceToNextCoordinate = getDistance(new Coordinate(currentPosition.getLat(), currentPosition.getLon()), new Coordinate(nextCoordinate.getLat(), nextCoordinate.getLon()));
					
		
					distToTravel -= distanceToNextCoordinate;
					if (distToTravel >= 0) {
						currentIndex++;
		
						naviApp.GPSselect.setLat(nextCoordinate.getLat());
						naviApp.GPSselect.setLon(nextCoordinate.getLon());
						lastKnownPosition = new Coordinate(nextCoordinate.getLat(), nextCoordinate.getLon());
						if (currentIndex == coordinateList.length - 1) {
							navigationFinished();
							break;
						}
		
					} else {
						double distLat = nextCoordinate.getLat() - currentPosition.getLat();
						double distLon = nextCoordinate.getLon() - currentPosition.getLon();
		
						this.currentNormal = calculateNormalVector(distLat, distLon);
		
						distLat = this.currentNormal[0] * (distToTravel + distanceToNextCoordinate);
						distLon = this.currentNormal[1] * (distToTravel + distanceToNextCoordinate);
						
						lastKnownPosition = new Coordinate(currentPosition.getLat() + distLat, currentPosition.getLon() + distLon);
		
						naviApp.GPSselect.setLat(currentPosition.getLat() + distLat);
						naviApp.GPSselect.setLon(currentPosition.getLon() + distLon);
					}
					
					
					map.updateUI();
					map.setDisplayPosition(naviApp.GPSselect, map.getZoom());
				}
		
				synchronized(this.lock) {
					this.distanceTravelled = 0;
					
					for (RoutingStepInformation rsi : routingInformation.getRoutingInformation()) {
						if((Integer) rsi.getWayPoint()[0] > currentIndex) {
							
							Coordinate c = new Coordinate(coordinateList[currentIndex+1].getLat(), coordinateList[currentIndex+1].getLon());
			
							double dist = map.getTileController().getTileSource().getDistance(lastKnownPosition.getLat(), lastKnownPosition.getLon(), c.getLat(), c.getLon());
							
							for (int i = currentIndex+1; i < (Integer) rsi.getWayPoint()[0]; i++) {
								Coordinate c1 = new Coordinate(coordinateList[i].getLat(), coordinateList[i].getLon());
								Coordinate c2 = new Coordinate(coordinateList[i+1].getLat(), coordinateList[i+1].getLon());
								dist += map.getTileController().getTileSource().getDistance(c1.getLat(), c1.getLon(), c2.getLat(), c2.getLon());
							}
							
							if (prevDist > dist) {
								double distDif = prevDist - dist;
								this.currentSpeed = (distDif * stepsPerSecond) * 3.6d;
								naviApp.naviSpeedLabel.setText((double) Math.round(this.currentSpeed * 10) / 10.0d + " km/h");
							}
							prevDist = dist;
							
							String labelText = String.format("<html><div WIDTH=%d>%s</div></html>", naviApp.naviDirectionLabel.getWidth(), "In " + this.getFormatedDistance(dist) + ": " + rsi.getInstruction());
							
							naviApp.naviDirectionLabel.setText(labelText);
			
							this.distanceTravelled -= dist;
							
							break;
						}
						
						this.distanceTravelled += Double.valueOf(rsi.getDistance().toString());
					}
				}
			}
			
			private String getFormatedDistance(double inputMeters) {
				if (inputMeters > 10000)
					return (int) Math.ceil(inputMeters / 1000.0d) + " km";
				else if (inputMeters > 1000)
					return Math.round(Math.round(inputMeters) / 100.0d) / 10.0d + " km";
				else
					return Math.round(inputMeters) + " m";
			}
			
			protected double prevDist;
		
			private void navigationFinished() {
				finish();
				javax.swing.JOptionPane.showMessageDialog(naviApp, "Herzlichen Glückwunsch!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!111111einseinself\nSie haben Ihr Ziel erreicht!", "Ziel erreicht", JOptionPane.INFORMATION_MESSAGE);
			}
		
			private double getDistance(org.openstreetmap.gui.jmapviewer.Coordinate c1, org.openstreetmap.gui.jmapviewer.Coordinate c2) {
				return getDistance(new double[] { c1.getLat(), c1.getLon() }, new double[] { c2.getLat(), c2.getLon() });
			}
			
			private double getDistance(double[] p1, double[] p2) {
				if (p1 == null || p2 == null)
					throw new RuntimeException();
				if (p1.length != 2 || p2.length != 2)
					throw new RuntimeException();
		
				return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
			}
		
			private boolean stillDriving() {
				return !finish;
			}
		
			private double[] calculateNormalVector(double x, double y) {
				double normalX = x / (Math.abs(x) + Math.abs(y));
				double normalY = y / (Math.abs(x) + Math.abs(y));
		
				return new double[] { normalX, normalY };
			}
		
			public void finish() {
				finish = Boolean.TRUE;
			}
			
			public double getDistanceTravelled() {
				synchronized(this.lock) {				
					return this.distanceTravelled;
				}
			}
			
			public double getCurrentSpeed() {
				return this.currentSpeed;
			}
			
			public long getRouteStartTime() {
				return this.timeRouteStarted;
			}
			
			public double[] getCurrentNormal() {
				return this.currentNormal;
			}
		}
	}
	
	modifies de.tu_bs.cs.isf.navi.routing.RoutingStepInformation {
	
		adds public java.lang.Number[] getWayPoint() {
			return wayPoint;
		}

		adds public void setWayPoint(java.lang.Number[] wayPoint) {
			this.wayPoint = wayPoint;
		}
	}
}