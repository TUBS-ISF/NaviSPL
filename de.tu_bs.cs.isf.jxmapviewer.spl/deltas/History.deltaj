delta History{
	
	modifies de.tu_bs.cs.isf.navi.NaviApp {
		adds import java.awt.event.ActionEvent;
		adds import java.awt.event.ActionListener;
		adds import java.awt.event.MouseEvent;
		adds import java.awt.event.MouseListener;
		adds import java.io.File;
		adds import java.io.FileInputStream;
		adds import java.io.FileOutputStream;
		adds import java.io.IOException;
		adds import java.io.ObjectInputStream;
		adds import java.io.ObjectOutputStream;
		adds import java.nio.file.Files;
		adds import java.nio.file.Path;
		adds import java.nio.file.Paths;
		adds import java.util.Vector;
		adds import javax.swing.JButton;
		adds import javax.swing.JList;
		adds import javax.swing.JPanel;
		adds import javax.swing.JScrollPane;
		adds import javax.swing.ListSelectionModel;
		adds import javax.swing.SwingUtilities;
		adds import javax.swing.event.ListSelectionEvent;
		adds import javax.swing.event.ListSelectionListener;

		adds import org.openstreetmap.gui.jmapviewer.Coordinate;
		adds import historyTest.HistoryObject;
		
		adds Vector<HistoryObject> historyList;
		adds JList<HistoryObject> jListHistory;
		adds private String historyListTxtPath = "src/de/tu_bs/cs/isf/navi/History.txt";
		
		modifies addMenu9() {
			jListHistory = new JList<HistoryObject>();
			jListHistory.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			jListHistory.setVisibleRowCount(-1);
			jListHistory.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
	
				public void valueChanged(ListSelectionEvent e) {
					if (jListHistory.getSelectedValue() != null) {
						Coordinate co = new Coordinate(jListHistory.getSelectedValue().getStartlatitude(),
								jListHistory.getSelectedValue().getStartlongitude());
	
						mapViewer.setDisplayPosition(co, mapViewer.getZoom());
						if (GPSselect == null) {
							GPSselect = new org.openstreetmap.gui.jmapviewer.MapMarkerDot(co);
							mapViewer.addMapMarker(GPSselect);
						}
						GPSselect.setLat(co.getLat());
						GPSselect.setLon(co.getLon());
						GPSlat.setText("" + co.getLat());
						GPSlon.setText("" + co.getLon());
					}
				}
	
			});
	
			JScrollPane scrollPane = new JScrollPane(jListHistory);
			scrollPane.setPreferredSize(new Dimension(250, 250));
	
			JButton deleteBtn = new JButton("Delete selected item");
			deleteBtn.addActionListener(new ActionListener() {
	
				public void actionPerformed(ActionEvent e) {
					historyList.removeElement(jListHistory.getSelectedValue());
					saveHistory();
					putHistoryItemsInList();
				}
	
			});
			
			mapViewer.addMouseListener(new MouseListener() {
	
				public void mouseClicked(MouseEvent e) {
					
					
				}
	
				public void mousePressed(MouseEvent e) {
					if (SwingUtilities.isRightMouseButton(e)) {
						jListHistory.clearSelection();
					}
					
				}
	
				public void mouseReleased(MouseEvent e) {
	
					
				}
	
				public void mouseEntered(MouseEvent e) {
					
				}
	
				public void mouseExited(MouseEvent e) {
					
				}
				
			});
			
			GridBagLayout historyGrid = new GridBagLayout();
			GridBagConstraints historyConstraints = new GridBagConstraints();
			historyConstraints.gridx = 0;
			historyConstraints.gridy = 0;
			historyGrid.addLayoutComponent(scrollPane, historyConstraints);
	
			historyConstraints = new GridBagConstraints();
			historyConstraints.gridx = 0;
			historyConstraints.gridy = 1;
			historyGrid.addLayoutComponent(deleteBtn, historyConstraints);
	
			historyList = new Vector<HistoryObject>();
			loadHistory();
	
			JPanel panel = new JPanel();
			panel.setLayout(historyGrid);
			panel.add(scrollPane);
			panel.add(deleteBtn);
	
			menuPanelList.put("History", panel);
			
		} 
		
		adds public void addLocationToHistory(double longitude, double latitude) {

			HistoryObject obj = new HistoryObject(longitude, latitude);
			historyList.add(obj);
	
			putHistoryItemsInList();
			saveHistory();
		}

		adds public void addRouteToHistory(double startlongitude, double startlatitude, double endlongitude,
			double endlatitude) {

			HistoryObject obj = new HistoryObject(startlatitude, startlongitude, endlatitude, endlongitude);
	
			if (historyList == null)
				historyList = new Vector<HistoryObject>();
			historyList.add(obj);
			saveHistory();
		}

		
		adds private void loadHistory() {
			try {
				File f = new File(historyListTxtPath);
	
				if (!f.exists() && !f.isDirectory()) {
					Path path = Paths.get(this.historyListTxtPath);
					Files.createFile(path);
				}
	
				FileInputStream is = new FileInputStream(f);
	
				if (is.available() > 0) {
					ObjectInputStream objectInput = new ObjectInputStream(is);
	
					Vector<HistoryObject> loadedList = (Vector<HistoryObject>) (objectInput.readObject());
					is.close();
					objectInput.close();
	
					historyList.addAll(loadedList);
					putHistoryItemsInList();
	
				}
	
			} catch (IOException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}

		}

		adds private void saveHistory() {
			try {
				File file = new File(historyListTxtPath);
				FileOutputStream fileOutput = new FileOutputStream(file);
				ObjectOutputStream objectOutput = new ObjectOutputStream(fileOutput);
				objectOutput.writeObject(historyList);
				fileOutput.close();
				objectOutput.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	
		adds private void putHistoryItemsInList() {
			HistoryObject[] historyArray = new HistoryObject[historyList.size()];
			for (int i = 0; i < historyList.size(); i++) {
				HistoryObject historyObj = historyList.get(i);
				historyArray[i] = historyObj;
			}
			this.jListHistory.setListData(historyArray);
		}
	}
	adds {
		import java.io.Serializable;
		import java.util.Date;
	
		public class HistoryObject implements Serializable {
		
			private static final long serialVersionUID = 1L;
		
			Date timestamp;
			double startlongitude = 0;
			double startlatitude = 0;
			double endlongitude = 0;
			double endlatitude = 0;
		
			public HistoryObject(double startlatitude, double startlongitude, double endlatitude, double endlongitude) {
		
				this.startlongitude = startlongitude;
				this.startlatitude = startlatitude;
				this.endlongitude = endlongitude;
				this.endlatitude = endlatitude;
				timestamp = new Date(System.currentTimeMillis());
			}
		
			public HistoryObject(double startlatitude, double startlongitude) {
		
				this.startlongitude = startlongitude;
				this.startlatitude = startlatitude;
				timestamp = new Date(System.currentTimeMillis());
			}
		
			public double getStartlongitude() {
				return startlongitude;
			}
		
			public void setStartlongitude(double startlongitude) {
				this.startlongitude = startlongitude;
			}
		
			public double getStartlatitude() {
				return startlatitude;
			}
		
			public void setStartlatitude(double startlatitude) {
				this.startlatitude = startlatitude;
			}
		
			public double getEndLongitude() {
				return endlongitude;
			}
		
			public void setEndLongitude(double endLongitude) {
				this.endlongitude = endLongitude;
			}
		
			public double getEndlatitude() {
				return endlatitude;
			}
		
			public void setEndlatitude(double endlatitude) {
				this.endlatitude = endlatitude;
			}
		
			public Date getTimestamp() {
				return timestamp;
			}
		
			public String toString() {
				if (endlatitude == 0 || endlongitude == 0)
					return "<html>" + timestamp.toString() + "<br>" + " Lat: " + String.valueOf(startlatitude) + " Long: "
							+ String.valueOf(startlongitude) + "</html>";
				else
					return "<html>" + timestamp.toString() + "<br>" + " Startlat: " + String.valueOf(startlatitude)
							+ " Startlong: " + String.valueOf(startlongitude) + " Endlat: " + String.valueOf(endlatitude)
							+ " Endlong: " + String.valueOf(endlongitude) + "</html>";
			}
		
		}
	}
	
}