delta Favorite requires Localization {

	adds {
	
		package de.tu_bs.cs.isf.navi.gui;

		import java.awt.GridBagLayout;
		import java.awt.event.ActionEvent;
		import java.awt.event.ActionListener;
		import java.io.FileInputStream;
		import java.io.FileOutputStream;
		import java.io.IOException;
		import java.io.ObjectOutputStream;
		import java.io.Serializable;
		import java.util.Vector;
		import javax.swing.JButton;
		import javax.swing.JLabel;
		import javax.swing.JList;
		import javax.swing.JPanel;
		import javax.swing.JScrollPane;
		import javax.swing.JTextField;
		
		public class Favorite extends JPanel implements Serializable {
		
			private java.util.Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> content;
			private javax.swing.JList<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> list;
			private javax.swing.JScrollPane scrollPane;
			private javax.swing.JTextField nameTextField;
			private javax.swing.JButton removeButton;
			private java.awt.GridBagConstraints bagCon;
		
			/**
			 * Constructor for a new favorite list element. Creates a JPanel with a
			 * scrollable list that contains a Vector with list entries.
			 */
			public Favorite() {
		
				content = new Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement>(loadFavList());
				list = new JList<de.tu_bs.cs.isf.navi.gui.FavoriteListElement>(content);
				scrollPane = new JScrollPane(list);
				nameTextField = new JTextField();
				removeButton = new JButton("Remove Element");
				
				removeButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
					removeFavElement(list.getSelectedValue());
					}
				});
				
				GridBagLayout gridbagLayout = new GridBagLayout();
				bagCon = new java.awt.GridBagConstraints();
				
				this.setLayout(gridbagLayout);
				bagCon.fill = 2;
				bagCon.gridx = 0;
				bagCon.gridy = 0;
				bagCon.weightx = 0;
				this.add(removeButton,bagCon);
				bagCon.fill = 2;
				bagCon.gridx = 0;
				bagCon.gridy = 1;
				bagCon.weightx = 0;
				this.add(new JLabel("Name:"), bagCon);
				bagCon.fill = 2;
				bagCon.gridx = 1;
				bagCon.gridy = 1;
				bagCon.weightx = 0;
				this.add(nameTextField, bagCon);
				bagCon.gridwidth = 2;
				bagCon.fill = 1;
				bagCon.gridx = 0;
				bagCon.gridy = 2;
				bagCon.weightx = 1;
				bagCon.weighty = 1;
				this.add(scrollPane, bagCon);
			}
		
			/**
			 * Loads the saved favorite list from file.
			 * 
			 * @return Vector<String> loaded favorite list
			 */
			private Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> loadFavList() {
				try {
					java.io.File f = new java.io.File("src/de/tu_bs/cs/isf/navi/gui/favList.txt");
					if(!f.exists() && !f.isDirectory()) { 
						java.nio.file.Path path = java.nio.file.Paths.get("src/de/tu_bs/cs/isf/navi/gui/favList.txt");
					    java.nio.file.Files.createFile(path);
					}
					FileInputStream inputStream = new FileInputStream("src/de/tu_bs/cs/isf/navi/gui/favList.txt");
					if (inputStream.available() > 0) {	
						java.io.ObjectInputStream objectInput = new java.io.ObjectInputStream(inputStream);
						Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> loadedList = (Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement>) (objectInput
								.readObject());
						inputStream.close();
						objectInput.close();
						return loadedList;
					}
				} catch (IOException e) {
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
				return new Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement>();
			}
		
			/**
			 * Saves the contents of the current list to file.
			 */
			private void saveFavList() {
				try {
					FileOutputStream fileOutput = new FileOutputStream("src/de/tu_bs/cs/isf/navi/gui/favList.txt");
					ObjectOutputStream objectOutput = new ObjectOutputStream(fileOutput);
					Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> tempList = new Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement>(content);
					objectOutput.writeObject(tempList);
					fileOutput.close();
					objectOutput.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		
			/**
			 * Adds a new element to the content list and then calls the saveFavList method
			 * 
			 * @param e
			 */
			public void addFavElement(de.tu_bs.cs.isf.navi.gui.FavoriteListElement e) {
				this.content.add(e);
				saveFavList();
				list.updateUI();
			}
		
			/**
			 * Removes the specified element from the content list and then calls the
			 * saveFavList method.
			 * 
			 * @param e
			 */
			public void removeFavElement(de.tu_bs.cs.isf.navi.gui.FavoriteListElement e) {
				this.content.removeElement(e);
				saveFavList();
				list.updateUI();
				list.clearSelection();
				try {
					list.clearSelection();
				} catch(Exception exept) {
					exept.printStackTrace();
				}
			}
		
		    
			public void addSaveFavButton(JButton button) {
				bagCon.fill = 2;
				bagCon.gridx = 1;
				bagCon.gridy = 0;
				bagCon.weightx = 1;
				bagCon.gridheight = 1;
				bagCon.gridwidth = 1;
				bagCon.weighty = 0;
				this.add(button, bagCon);
			}
			
			public void addSaveFavRouteButton(JButton button) {
			
			}
		
			public de.tu_bs.cs.isf.navi.gui.FavoriteListElement createFavListElement(org.openstreetmap.gui.jmapviewer.Coordinate co) {
				return new de.tu_bs.cs.isf.navi.gui.FavoriteListElement(nameTextField.getText(), co.getLat(), co.getLon());
			}
			
			public java.util.Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> getContent() {
				return content;
			}

			public void setContent(java.util.Vector<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> content) {
				this.content = content;
			}
		
			public javax.swing.JList<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> getList() {
				return list;
			}
		
			public void setList(javax.swing.JList<de.tu_bs.cs.isf.navi.gui.FavoriteListElement> list) {
				this.list = list;
			}
		
			public javax.swing.JScrollPane getScrollPane() {
				return scrollPane;
			}
		
			public void setScrollPane(javax.swing.JScrollPane scrollPane) {
				this.scrollPane = scrollPane;
			}
		
			public javax.swing.JTextField getNameTextField() {
				return nameTextField;
			}
		
			public void setNameTextField(javax.swing.JTextField nameTextField) {
				this.nameTextField = nameTextField;
			}
		
			public javax.swing.JButton getRemoveButton() {
				return removeButton;
			}
		
			public void setRemoveButton(javax.swing.JButton removeButton) {
				this.removeButton = removeButton;
			}
		
			public java.awt.GridBagConstraints getBagCon() {
				return bagCon;
			}
		
			public void setBagCon(java.awt.GridBagConstraints bagCon) {
				this.bagCon = bagCon;
			}
		}
	}

	modifies de.tu_bs.cs.isf.navi.NaviApp {
			
		modifies addMenu3() {
			final de.tu_bs.cs.isf.navi.gui.Favorite fav = new de.tu_bs.cs.isf.navi.gui.Favorite();
			fav.addSaveFavButton(createFavoriteButton(fav));
			fav.addSaveFavRouteButton(createFavoriteRouteButton(fav));
			fav.getList().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
				public void valueChanged(javax.swing.event.ListSelectionEvent e) {
					if (fav.getList().getSelectedValue() != null) {
						org.openstreetmap.gui.jmapviewer.Coordinate co = new org.openstreetmap.gui.jmapviewer.Coordinate(fav.getList().getSelectedValue().getLat(), fav.getList().getSelectedValue().getLongi());
						mapViewer.setDisplayPosition(co, mapViewer.getZoom());
						if (GPSselect == null) {
							GPSselect = new org.openstreetmap.gui.jmapviewer.MapMarkerDot(co);
							mapViewer.addMapMarker(GPSselect);
						}
						GPSselect.setLat(co.getLat());
						GPSselect.setLon(co.getLon());
						GPSlat.setText("" + co.getLat());
						GPSlon.setText("" + co.getLon());
						fillRoutingTextFieldCoordinates(String.valueOf(fav.getList().getSelectedValue().getLat()),
								String.valueOf(fav.getList().getSelectedValue().getLongi()),
								String.valueOf(fav.getList().getSelectedValue().getLatEnd()),
								String.valueOf(fav.getList().getSelectedValue().getLongiEnd()));
					}
				}
			});
			menuPanelList.put("Favorites", fav);
			repaint();
		}
				
		adds public void fillRoutingTextFieldCoordinates(String startLat, String startLongi, String endLat, String endLongi){
		}
				
		adds public javax.swing.JButton createFavoriteRouteButton(final de.tu_bs.cs.isf.navi.gui.Favorite fav) {
			return null;
		}
			
		adds public javax.swing.JButton createFavoriteButton(final de.tu_bs.cs.isf.navi.gui.Favorite fav) {
						
			final javax.swing.JButton favSaveButton = new javax.swing.JButton("Add New Favorite");
		
			mapViewer.addMouseListener(new java.awt.event.MouseListener() {
				public void mouseReleased(java.awt.event.MouseEvent e) {
					fav.getList().clearSelection();
				}
				public void mousePressed(java.awt.event.MouseEvent e) {
				}

				public void mouseExited(java.awt.event.MouseEvent e) {
				}

				public void mouseEntered(java.awt.event.MouseEvent e) {
				}

				public void mouseClicked(java.awt.event.MouseEvent e) {
				}
			});
		
			favSaveButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					if (GPSselect != null) {
						org.openstreetmap.gui.jmapviewer.Coordinate co = GPSselect.getCoordinate();
						fav.addFavElement(fav.createFavListElement(co));
						fav.getNameTextField().setText("");
					}
	
				}
			});
			return favSaveButton;
		}
	}
		
	adds {
			
		package de.tu_bs.cs.isf.navi.gui;
		import java.io.Serializable;
			
		public class FavoriteListElement implements java.io.Serializable {

			private double lat;
			private double longi;
			private String name;
			private double latEnd;
			private double longiEnd;
			private boolean isRoute;		
					
			public FavoriteListElement(String name, double lat, double longi) {
				setLat(lat);
				setLongi(longi);
				this.setName(name);
				isRoute = Boolean.FALSE;
			}
			
			public FavoriteListElement(int placeholder, String name, double latStart, double longiStart, double latEnd, double longiEnd) {
			setLat(latStart);
			setLongi(longiStart);
			setLatEnd(latEnd);
			setLongiEnd(longiEnd);
			setName(name);
			isRoute = Boolean.TRUE;
			}
			
			
			public String getName() {
				return name;
			}
			
			public void setName(String name) {
				this.name = name;
			}
			
			public double getLat() {
				return lat;
			}
			
			
			public void setLat(double lat) {
				this.lat = lat;
			}
			
			
			public double getLongi() {
				return longi;
			}
			
			
			public void setLongi(double longi) {
				this.longi = longi;
			}
				
			public double getLatEnd() {
				return latEnd;
			}
			
			
			public void setLatEnd(double lat) {
				this.latEnd = lat;
			}
			
			
			public double getLongiEnd() {
				return longiEnd;
			}
			
			
			public void setLongiEnd(double longi) {
				this.longiEnd = longi;
			}
				
			public boolean getIsRoute(){
				return this.isRoute;
			}
			
			
			public java.lang.String toString() {
				if (isRoute) {
					return "[Route] " + this.getName();
				} else {
					return "[GPS] " + this.getName();
				}
			}	
		}
	}
}