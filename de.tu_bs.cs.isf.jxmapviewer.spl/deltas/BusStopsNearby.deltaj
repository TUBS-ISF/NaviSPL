delta BusStopsNearby requires Localization {
	modifies de.tu_bs.cs.isf.navi.NaviApp {
	
		adds import java.util.ArrayList;
		adds import javax.swing.JPanel;
		adds import javax.swing.JSlider;
		adds import javax.swing.BoxLayout;
		adds import java.net.HttpURLConnection;
		adds import java.net.URL;
		adds import java.io.BufferedReader;
		adds import java.io.InputStreamReader;
		adds import org.json.JSONArray;
		adds import org.json.JSONObject;
		adds import org.json.JSONTokener;
		adds import java.awt.Color;
		adds import java.util.List;
		adds import java.net.MalformedURLException;
		adds import java.net.ProtocolException;
		adds import java.io.IOException;
		adds import java.awt.event.MouseListener;
		adds import java.awt.event.MouseEvent;
		
		adds import org.openstreetmap.gui.jmapviewer.Coordinate;
		adds import org.openstreetmap.gui.jmapviewer.MapMarkerDot;
		adds import org.openstreetmap.gui.jmapviewer.Style;
		adds import de.tu_bs.cs.isf.navi.bus.BusElement;
					
		adds protected java.util.List<de.tu_bs.cs.isf.navi.bus.BusElement> busStopList;
		adds protected javax.swing.JPanel busPanel;
		adds protected javax.swing.JSlider busSlider;
		
		modifies addMenu() {
			original();
			busStopList = new ArrayList<BusElement>();
			createBusMenu();
			mapViewer.addMouseListener(new MouseListener() {
				
				public void mouseClicked(MouseEvent e) {	
					clearBusStopsList();
					findBusStops();
				}
				
				public void mousePressed(MouseEvent e) { }			
				public void mouseReleased(MouseEvent e) { }			
				public void mouseEntered(MouseEvent e) { }
				public void mouseExited(MouseEvent e) { }			
			});
		}
		
		adds protected void createBusMenu() {
			busPanel = new JPanel();		
			busPanel.setLayout(new BoxLayout(busPanel, BoxLayout.PAGE_AXIS));
			
			JPanel busHeader = new JPanel();
			busSlider = new javax.swing.JSlider(JSlider.HORIZONTAL, 500, 5000, 500);
			busSlider.setMajorTickSpacing(2250);
			busSlider.setMinorTickSpacing(250);
			busSlider.setPaintTicks(Boolean.TRUE);
			busSlider.setPaintLabels(Boolean.TRUE);
			busSlider.setSnapToTicks(Boolean.TRUE);
			busSlider.setPreferredSize(new java.awt.Dimension(150, 40));
			
			busHeader.add(new JLabel("| Radius:"));
			busHeader.add(busSlider);
			
			busPanel.add(busHeader);
			
			menuPanelList.put("Bus Stops", busPanel);
		}
	
		adds protected void findBusStops() {
			String location = "location=" + GPSselect.getLat() + "," + GPSselect.getLon();
			String radius = "radius=" + String.valueOf(busSlider.getValue());
			String type = "type=bus_station";/*"['bus_station','subway_station']";*/
			String api_key = "key=AIzaSyBU_1NMbpJ9PPUUrL6WsCqHWKGh0mpiNrU";
			String request = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?" + location + "&" + radius + "&"
								+ type + "&" + api_key;
			try {
				URL url = new URL(request);
				HttpURLConnection conn = (HttpURLConnection) url.openConnection();
				conn.setRequestMethod("GET");
				conn.setRequestProperty("accept", "application/json");
						
				BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
				String output;
				String all = "";
		
				while ((output = br.readLine()) != null) {
					all += output;				
				}
				
				JSONTokener t = new JSONTokener(all);									
				JSONObject parsed = (JSONObject) t.nextValue();
					
				String status =  parsed.getString("status");
				
				if (!(status.equals("OK"))){ 
					System.out.println("Bus Status: " + status);			
				}
				
				JSONArray resultArray = (JSONArray) parsed.get("results");
				
				for (int i = 0; i < resultArray.length(); i++) {
					JSONObject bus = (JSONObject) resultArray.get(i);
					
					JSONObject loc = (JSONObject) ((JSONObject) bus.get("geometry")).get("location");
					Coordinate c = ne

	public void addMenu2() {
	}

	public void addMenu3() {
	}

	public void addMenu4() {
	}

	public void addMenu5() {
	}

	public void addMenu6() {
	}

	public void addMenu7() {
	}

	public void addMenu8() {
	}

	public void addMenu9() {
	}

	public void addMenu10() {
	}

	public void addMenu11() {
	}

	public void addMenu12() {
	}

	public void addMenu13() {
	}

	public void addMenu14() {
	}

	public void addMenu15() {
	}w Coordinate(loc.getDouble("lat"), loc.getDouble("lng"));
					String name = bus.getString("name");
					
					MapMarkerDot m = new MapMarkerDot(name, c);
					m.setStyle(new Style(Color.BLACK, Color.RED, null, MapMarkerDot.getDefaultFont()));
					
					mapViewer.addMapMarker(m);
					
					JSONArray typeArray = (JSONArray) bus.get("types");
					List<String> typeList = new ArrayList<String>();
					for (int j = 0; j < typeArray.length(); j++) {					
						typeList.add(typeArray.getString(j));
					}
					
					busStopList.add(new BusElement(m, typeList, bus));
				}
				
			} catch (ProtocolException e) {
			} catch (MalformedURLException e) {
			} catch (IOException e) {
			}
		}
		
		/*adds protected void updatebusvisibility() {
			java.util.List<javax.swing.JCheckBox> cb = new java.util.ArrayList<javax.swing.JCheckBox>();
			
			java.awt.Component[] comps = busItems.getComponents();
			for (java.awt.Component comp : comps) {
				try {
					cb.add((javax.swing.JCheckBox) comp);
				} catch (ClassCastException e) {
					
				}
			}
			
			
			for (de.tu_bs.cs.isf.navi.bus.buselement e : buslist) {
				boolean shouldBeVisible = Boolean.FALSE;
				for (String s : e.types) {
					for (javax.swing.JCheckBox c : cb) {
						if (c.getName().equals(s)) {
							if (c.isSelected()) {
								shouldBeVisible = Boolean.TRUE;
							}
						}
					}
				}
				if (shouldBeVisible && !mapViewer.getMapMarkerList().contains(e.marker)) {
					mapViewer.addMapMarker(e.marker);
				}
				if (!shouldBeVisible && mapViewer.getMapMarkerList().contains(e.marker)) {
					mapViewer.removeMapMarker(e.marker);
				}
			}
		}*/
		
		adds protected void clearBusStopsList() {
			for (BusElement p : busStopList) {
				mapViewer.removeMapMarker(p.marker);
			}
			busStopList.clear();
		}
	}
	
	adds {
	
		package de.tu_bs.cs.isf.navi.bus;

		import java.util.List;
		
		public class BusElement {
			
			public java.util.List<String> types;
			
			public org.openstreetmap.gui.jmapviewer.MapMarkerDot marker;
			
			public org.json.JSONObject json;	
			
			public BusElement(org.openstreetmap.gui.jmapviewer.MapMarkerDot m, java.util.List<String>types, org.json.JSONObject json) {
				this.marker = m;
				this.types = types;
				this.json = json;
			}
		
		}
			
	
	}
}