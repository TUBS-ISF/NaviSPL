delta Routing {

	modifies de.tu_bs.cs.isf.navi.NaviApp {
		adds import org.openstreetmap.gui.jmapviewer.MapMarkerDot;
		adds import de.tu_bs.cs.isf.navi.routing.RoutingCalculator;
		adds import de.tu_bs.cs.isf.navi.routing.RoutingInformation;
		adds import java.awt.event.ActionEvent;
		adds import java.awt.event.ActionListener;
		adds import java.awt.Insets;
		adds import javax.swing.JList;
		adds import javax.swing.JScrollPane;
		adds import javax.swing.ListSelectionModel;
		adds import javax.swing.JTextField;
		adds import javax.swing.JPanel;
	
		adds private de.tu_bs.cs.isf.navi.routing.RoutingInformation routingInformation;
		
		adds private void paintRoute() {
			if (routingInformation.getRoutingInformation().size() <= 1)
				return;
			
			MapMarkerDot m1 = new MapMarkerDot(8.34234, 48.23424);
			mapViewer.addMapMarker(m1);
			MapMarkerDot m2 = new MapMarkerDot(8.34423, 48.26424);
			mapViewer.addMapMarker(m2);
		}
		
		modifies addMenu1() {
			int q = 25;
			Insets i = new Insets(q, q, q, q);
	
			
			final JTextField startLatitude = new JTextField();
			startLatitude.setText("52.27111");
			final JTextField startLongitude = new JTextField();
			startLongitude.setText("10.53111");
			JButton getStartCoords = new JButton("GetStart");
			getStartCoords.addActionListener(new ActionListener() {
	
				public void actionPerformed(ActionEvent e) {
					MapMarkerDot m = GPSselect;
					startLatitude.setText(String.valueOf(m.getLat()));
					startLongitude.setText(String.valueOf(m.getLon()));
				}
				
			});
			
			
			
			final JTextField endLatitude = new JTextField();
			endLatitude.setText("52.14240");
			final JTextField endLongitude = new JTextField();
			endLongitude.setText("10.54840");
			JButton getEndCoords = new JButton("GetEnd");
			getEndCoords.addActionListener(new ActionListener() {
	
				public void actionPerformed(ActionEvent e) {
					MapMarkerDot m = GPSselect;
					endLatitude.setText(String.valueOf(m.getLat()));
					endLongitude.setText(String.valueOf(m.getLon()));
				}
				
			});
			
			
			String[] test = {"Test", "Scroll"};
			final JList<String> routingList = new JList<String>(test);
			routingList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
			routingList.setLayoutOrientation(JList.VERTICAL);
			routingList.setVisibleRowCount(-1);
	
			JButton startBtn = new JButton("Start Routing");
			startBtn.setMargin(i);
			startBtn.addActionListener(new ActionListener() {
	
				public void actionPerformed(ActionEvent e) {
					RoutingCalculator calc = new RoutingCalculator(startLatitude.getText(), startLongitude.getText(),
							endLatitude.getText(), endLongitude.getText());
					routingInformation = calc.calculateRoute();
					if(routingInformation != null) {
						routingList.clearSelection();
						routingList.setListData(routingInformation.getRouteInstructions());
						paintRoute();
					} else {
						String[] gehtNicht = new String[] {"Route kann nicht berechnet werden"};
						routingList.setListData(gehtNicht);
					}
				}
	
			});
	
			 JScrollPane listScroller = new JScrollPane(routingList);
			 listScroller.setPreferredSize(new Dimension(250, 250));
	
			// Layout
			JPanel panel = new JPanel();
			GridBagLayout grid = new GridBagLayout();
	
			panel.setLayout(grid);
	
			GridBagConstraints conStartLat = new GridBagConstraints();
			conStartLat.weightx = 1;
			conStartLat.fill = GridBagConstraints.HORIZONTAL;
			conStartLat.gridx = 0;
			conStartLat.gridy = 0;
			panel.add(startLatitude, conStartLat);
	
			GridBagConstraints conStartLong = new GridBagConstraints();
			conStartLong.weightx = 1;
			conStartLong.fill = GridBagConstraints.HORIZONTAL;
			conStartLong.gridx = 1;
			conStartLong.gridy = 0;
			panel.add(startLongitude, conStartLong);
	
			GridBagConstraints conEndLat = new GridBagConstraints();
			conEndLat.weightx = 1;
			conEndLat.fill = GridBagConstraints.HORIZONTAL;
			conEndLat.gridx = 0;
			conEndLat.gridy = 1;
			panel.add(endLatitude, conEndLat);
	
			GridBagConstraints conEndLong = new GridBagConstraints();
			conEndLong.weightx = 1;
			conEndLong.fill = GridBagConstraints.HORIZONTAL;
			conEndLong.gridx = 1;
			conEndLong.gridy = 1;
			panel.add(endLongitude, conEndLong);
	
			GridBagConstraints conStartBtn = new GridBagConstraints();
			conStartBtn.gridwidth = 3;
			conStartBtn.fill = GridBagConstraints.HORIZONTAL;
			conStartBtn.gridx = 0;
			conStartBtn.gridy = 2;
			panel.add(startBtn, conStartBtn);
	
			GridBagConstraints conList = new GridBagConstraints();
			conList.gridwidth = 3;
			conList.fill = GridBagConstraints.HORIZONTAL;
			conList.gridx = 0;
			conList.gridy = 3;
			panel.add(listScroller, conList);
			
			GridBagConstraints conSartCoordBtn = new GridBagConstraints();
			conSartCoordBtn.fill = GridBagConstraints.HORIZONTAL;
			conSartCoordBtn.gridx = 2;
			conSartCoordBtn.gridy = 0;
			panel.add(getStartCoords, conSartCoordBtn);
			
			GridBagConstraints conEndCoordBtn = new GridBagConstraints();
			conEndCoordBtn.fill = GridBagConstraints.HORIZONTAL;
			conEndCoordBtn.gridx = 2;
			conEndCoordBtn.gridy = 1;
			panel.add(getEndCoords, conEndCoordBtn);
			
			menuPanelList.put("Routing", panel);
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	adds {
		package de.tu_bs.cs.isf.navi.routing;

		import java.io.BufferedReader;
		import java.io.IOException;
		import java.io.InputStreamReader;
		import java.net.HttpURLConnection;
		import java.net.MalformedURLException;
		import java.net.URL;
		
		import org.json.simple.JSONArray;
		import org.json.simple.JSONObject;
		import org.json.simple.parser.JSONParser;
		import org.json.simple.parser.ParseException;
		
		public class RoutingCalculator {
		
			private String coordinates = new String();
			private String apiUrl = "https://api.openrouteservice.org/directions?";
			private String api_keyUrl = "api_key=58d904a497c67e00015b45fc36a9e9b71dbc4ca655f5f2375eebfb67";
			private String profileUrl = "profile=driving-car";
			private RoutingInformation route;
			private String request = new String();
			
			/**
			 * Constructor
			 * @param latitudeStart
			 * @param longitudeStart
			 * @param latitudeEnd
			 * @param longitudeEnd
			 */
			public RoutingCalculator(long latitudeStart, long longitudeStart, long latitudeEnd, long longitudeEnd) {
				addCoordinates(latitudeStart, longitudeStart);
				addCoordinates(latitudeEnd, latitudeEnd);
			}
			
			public RoutingCalculator(String latitudeStart, String longitudeStart, String latitudeEnd, String longitudeEnd) {
				try {
					addCoordinates(Double.parseDouble(latitudeStart), Double.parseDouble(longitudeStart));
					addCoordinates(Double.parseDouble(latitudeEnd), Double.parseDouble(latitudeEnd));
				} catch(NumberFormatException e) {
					e.printStackTrace();
				}
			}
			
			private void addCoordinates(double longitude, double latitude) {
				if (coordinates.length() == 0)
					coordinates += "coordinates=" + String.valueOf(longitude) + "," + String.valueOf(latitude);
				else
					coordinates += "|" + String.valueOf(longitude) + "," + String.valueOf(latitude);
			}
		
			public RoutingInformation calculateRoute() {
				try {
					route = new RoutingInformation();
					request = apiUrl + api_keyUrl + "&" + profileUrl + "&" + coordinates;
					URL url = new URL(request);
					HttpURLConnection conn = (HttpURLConnection) url.openConnection();
					conn.setRequestMethod("GET");
					conn.setRequestProperty("accept", "application/json");
		
					if (conn.getResponseCode() != 200) {
		//				System.out.println(request);
		//				throw new RuntimeException("Failed : HTTP error code : " + conn.getResponseCode());
						return null;
					}
		
					BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
					String output;
					System.out.println("Output from Server .... \n");
					while ((output = br.readLine()) != null) {
						
						
						
						
						JSONParser p = new JSONParser();
		
						try {
							JSONObject parsed = (JSONObject) p.parse(output);
		
							JSONArray routesArray = (JSONArray) parsed.get("routes");
							JSONObject routes = (JSONObject) routesArray.get(0);
		
							JSONArray segementsArray = (JSONArray) routes.get("segments");
							JSONObject segments = (JSONObject) segementsArray.get(0);
		
							JSONArray stepsArray = (JSONArray) segments.get("steps");
		
							for (Object step : stepsArray) {
								JSONObject JSONstep = (JSONObject) step;
		
								Number duration = (Number) JSONstep.get("duration");
								Number distance = (Number) JSONstep.get("distance");
								String instruction = (String) JSONstep.get("instruction");
								String name = (String) JSONstep.get("name");
								Number type = (Number) JSONstep.get("type");
		
								JSONArray wayPointArray = (JSONArray) JSONstep.get("way_points");
								Number wayPointX = (Number) wayPointArray.get(0);
								Number wayPointY = (Number) wayPointArray.get(1);
		
								RoutingStepInformation newInformation = new RoutingStepInformation(duration, distance,
										instruction, name, type, wayPointX, wayPointY);
								route.addStep(newInformation);
							}
						} catch (ParseException e) {
							e.printStackTrace();
						} catch (ClassCastException e) {
							e.printStackTrace();
						} catch (NullPointerException e) {
							e.printStackTrace();
						}
					}
		
					conn.disconnect();
		
				} catch (MalformedURLException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
				
				return route;
			}
		}
				
	}
}