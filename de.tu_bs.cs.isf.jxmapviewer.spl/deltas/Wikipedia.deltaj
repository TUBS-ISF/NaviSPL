delta Wikipedia requires Poi {
	modifies de.tu_bs.cs.isf.navi.NaviApp {
		adds import java.awt.Color;
		adds import java.awt.Desktop;
		adds import java.awt.Dimension;
		adds import java.net.URI;
		adds import java.awt.event.MouseEvent;
		adds import java.awt.event.MouseListener;
		adds import java.io.IOException;
		adds import java.io.InputStream;
		adds import java.io.InputStreamReader;
		adds import javax.swing.JLabel;
		adds import org.openstreetmap.gui.jmapviewer.MapMarkerDot;
	
		adds private long oldTimeWiki;
	
		modifies addMenu() {
			original();
			createWikiMenu();
			mapViewer.addMouseMotionListener(new java.awt.event.MouseMotionListener() {
				public void mouseDragged(java.awt.event.MouseEvent e) { }
	
				public void mouseMoved(java.awt.event.MouseEvent e) {
					java.awt.Point mousePoint = e.getPoint();
					for (de.tu_bs.cs.isf.navi.poi.POIelement p : POIlist) {
						if (mapViewer.getMapMarkerList().contains(p.marker)) {
							org.openstreetmap.gui.jmapviewer.Coordinate c = p.marker.getCoordinate();
							java.awt.Point point = mapViewer.getMapPosition(c);
							if (point == null)
								continue;
							point.x -= MapMarkerDot.DOT_RADIUS;
							point.y -= MapMarkerDot.DOT_RADIUS;
							boolean a1 = mousePoint.x >= point.x;
							boolean a2 = mousePoint.x <= (point.x + MapMarkerDot.DOT_RADIUS * 2);
							boolean a3 = mousePoint.y >= point.y;
							boolean a4 = mousePoint.y <= (point.y + MapMarkerDot.DOT_RADIUS * 2);
							if (a1 && a2 && a3 && a4) {
								if (WikiElement == null) {
									if (System.currentTimeMillis() > oldTimeWiki + 1000) {
										displayText(p);
										oldTimeWiki = System.currentTimeMillis();
									}
								}
								return;
							}
						}
					}
					WikiElement = null;
				}
			});
		}
		
		adds private void createWikiMenu() {
			javax.swing.JPanel panel = new javax.swing.JPanel();
			WikiLabel = new javax.swing.JLabel();
			WikiLabel.setHorizontalTextPosition(JLabel.CENTER);
			WikiLabel.setVerticalTextPosition(JLabel.CENTER);
			WikiLabel.addMouseListener(new MouseListener() {
	
				public void mouseReleased(MouseEvent e) { }
	
				public void mousePressed(MouseEvent e) { }
	
				public void mouseExited(MouseEvent e) {
					WikiLabel.setForeground(Color.BLACK);
				}
	
				public void mouseEntered(MouseEvent e) {
					WikiLabel.setForeground(Color.BLUE);
				}
	
				public void mouseClicked(MouseEvent e) {
					try {
						if (wikiUrl != "") {
							Desktop.getDesktop().browse(URI.create(wikiUrl));
						}
					} catch (IOException e1) { }
				}
			});
			panel.add(WikiLabel);
			menuPanelList.put("POI Wikipedia", panel);
		}
	
		adds protected javax.swing.JLabel WikiLabel;
		adds protected de.tu_bs.cs.isf.navi.poi.POIelement WikiElement;
		adds protected String wikiUrl = "";
	
		adds protected void displayText(de.tu_bs.cs.isf.navi.poi.POIelement p) {
			String name = p.json.getString("name");
			String request = "https://en.wikipedia.org/w/api.php?action=opensearch&search=" + name.replace(" ", "%20");
			System.out.println(request);
			java.net.URL url;
			try {
				url = new java.net.URL(request);
				java.net.HttpURLConnection conn = (java.net.HttpURLConnection) url.openConnection();
				conn.setRequestMethod("GET");
				conn.setRequestProperty("accept", "application/json");
				if (conn.getResponseCode() != 200) {
	
					throw new RuntimeException("Failed : HTTP error code : " + conn.getResponseCode());
				}
				InputStream i = conn.getInputStream();
				InputStreamReader inputs = new java.io.InputStreamReader(i);
				java.io.BufferedReader br = new java.io.BufferedReader(inputs);
				String output = "";
				String all = "";
				while ((output = br.readLine()) != null) {
					all += output;
				}
				org.json.JSONTokener t = new org.json.JSONTokener(all);
				final org.json.JSONArray parsed = (org.json.JSONArray) t.nextValue();
				System.out.println(parsed);
				if (parsed.getJSONArray(parsed.length() - 1).length() != 0
						&& parsed.getJSONArray(parsed.length() - 2).length() != 0) {
	
					Dimension dim = WikiLabel.getMaximumSize();
					dim.width = menuPanel.getWidth() - 10;
					dim.height = 150;
					WikiLabel.setPreferredSize(dim);
					if (parsed.getJSONArray(parsed.length() - 2).getString(0).isEmpty() || parsed.getJSONArray(parsed.length() - 2).getString(0).contains("may refer to")) {
						WikiLabel.setText(
								"<html><body>" + parsed.getString(0) + "</body></html>");
					} else {
						WikiLabel.setText(
								"<html><body>" + parsed.getJSONArray(parsed.length() - 2).getString(0) + "</body></html>");
					}
					wikiUrl = parsed.getJSONArray(parsed.length() - 1).getString(0);
	
				} else
					WikiLabel.setText("");
			} catch (java.net.MalformedURLException e) {
				System.out.println("Error1");
			} catch (java.io.IOException e) {
				System.out.println("Error2");
			}
		}
	}
}
