 configuration delta "POIphoto"
	dialect <http://www.emftext.org/java>
		requires <Poi.decore>
		modifies <../src-core/de/tu_bs/cs/isf/navi/NaviApp.java>
		{
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "org.openstreetmap.gui.jmapviewer.MapMarkerDot");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.JLabel");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.imageio.ImageIO");
	modifyStatementListContainer(<method:de.tu_bs.cs.isf.navi.NaviApp.addMenu()>, "public void addMenu() {
		addMenu$POIphoto();
			createPicMenu();
			
			mapViewer.addMouseMotionListener(new java.awt.event.MouseMotionListener() {
	
				public void mouseDragged(java.awt.event.MouseEvent e) {}
			
				public void mouseMoved(java.awt.event.MouseEvent e) {
					java.awt.Point mousePoint = e.getPoint();
					
					for (de.tu_bs.cs.isf.navi.poi.POIelement p : POIlist) {
						if (mapViewer.getMapMarkerList().contains(p.marker)) {
							org.openstreetmap.gui.jmapviewer.Coordinate c = p.marker.getCoordinate();
							java.awt.Point point = mapViewer.getMapPosition(c);
							if (point == null) continue;
							
							point.x -= MapMarkerDot.DOT_RADIUS;
							point.y -= MapMarkerDot.DOT_RADIUS;
							
							boolean a1 = mousePoint.x >= point.x;
							boolean a2 = mousePoint.x <= (point.x + MapMarkerDot.DOT_RADIUS* 2);
							boolean a3 = mousePoint.y >= point.y;
							boolean a4 = mousePoint.y <= (point.y + MapMarkerDot.DOT_RADIUS* 2);
							
							if (a1 && a2 && a3 && a4) {
								if (imgElement == null) {
									displayPhoto(p);
								}
								return;
							}
						}
					}
					imgLabel.setText(\"\");
					imgLabel.setIcon(null);
					imgElement = null;
				}
				
			});
	}
", "POIphoto", true);
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "private void createPicMenu() {
			javax.swing.JPanel panel = new javax.swing.JPanel();
			imgLabel = new javax.swing.JLabel();
		
			imgLabel.setHorizontalTextPosition(JLabel.CENTER);
			imgLabel.setVerticalTextPosition(JLabel.CENTER);
				
			panel.add(imgLabel);
			menuPanelList.put(\"POI Photo\", panel);
		}
");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "protected javax.swing.JLabel imgLabel;
");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "protected de.tu_bs.cs.isf.navi.poi.POIelement imgElement;
");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "protected void displayPhoto(de.tu_bs.cs.isf.navi.poi.POIelement p) {
			imgLabel.setIcon(null);
			imgLabel.setText(\"\");
		
			try {
				if (!p.json.has(\"photos\")) {
					imgLabel.setText(\"NO PHOTO\");
					return;
				}
				org.json.JSONArray a = p.json.getJSONArray(\"photos\");
				if (a.length() == 0) return;
					
				String ref = \"photoreference=\" + a.getJSONObject(0).getString(\"photo_reference\");
				String api_key = \"key=AIzaSyBU_1NMbpJ9PPUUrL6WsCqHWKGh0mpiNrU\";
				String maxwidth = \"maxwidth=\" + String.valueOf(splitPane.getRightComponent().getWidth());
					
				String api = \"https://maps.googleapis.com/maps/api/place/photo?\" + maxwidth + \"&\" + ref + \"&\" + api_key;
				java.net.URL request = new java.net.URL(api);
				java.awt.Image img = ImageIO.read(request);
				
				javax.swing.ImageIcon icon = new javax.swing.ImageIcon(img); 
				imgLabel.setIcon(icon);
					
			} catch (java.net.MalformedURLException e) {
			} catch (java.io.IOException e) {
			} catch (org.json.JSONException e) {
			}
		}
");
	}
	