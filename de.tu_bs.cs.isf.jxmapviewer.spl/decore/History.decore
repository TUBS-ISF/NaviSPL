 configuration delta "History"
	dialect <http://www.emftext.org/java>
		requires <Localization.decore>
		creates <de/tu_bs/cs/isf/navi/history/HistoryObject.java>
		modifies <../src-core/de/tu_bs/cs/isf/navi/NaviApp.java>
		{
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.awt.event.ActionEvent");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.awt.event.ActionListener");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.awt.event.MouseEvent");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.awt.event.MouseListener");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.io.File");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.io.FileInputStream");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.io.FileOutputStream");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.io.IOException");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.io.ObjectOutputStream");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.nio.file.Files");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.nio.file.Paths");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.nio.file.Path");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.util.Vector");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.JButton");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.JList");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.JPanel");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.JScrollPane");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.event.ListSelectionEvent");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.event.ListSelectionListener");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.ListSelectionModel");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.SwingUtilities");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, "de.tu_bs.cs.isf.navi.history.HistoryObject");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "java.util.Vector<de.tu_bs.cs.isf.navi.history.HistoryObject> historyList;
");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "javax.swing.JList<de.tu_bs.cs.isf.navi.history.HistoryObject> jListHistory;
");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "private String historyListTxtPath;
");
	modifyStatementListContainer(<method:de.tu_bs.cs.isf.navi.NaviApp.addMenu()>, "public void addMenu() {
		addMenu$History();
			historyListTxtPath = \"resources/History.txt\";

			if (jListHistory == null)
				jListHistory = new JList<HistoryObject>();
			jListHistory.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			jListHistory.setVisibleRowCount(20);
			jListHistory.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
	
				public void valueChanged(ListSelectionEvent e) {
					if (jListHistory.getSelectedValue() != null) {
						org.openstreetmap.gui.jmapviewer.Coordinate co = new org.openstreetmap.gui.jmapviewer.Coordinate(jListHistory.getSelectedValue().getStartlatitude(),
								jListHistory.getSelectedValue().getStartlongitude());
	
						mapViewer.setDisplayPosition(co, mapViewer.getZoom());
						if (GPSselect == null) {
							GPSselect = new org.openstreetmap.gui.jmapviewer.MapMarkerDot(co);
							mapViewer.addMapMarker(GPSselect);
						}
						GPSselect.setLat(co.getLat());
						GPSselect.setLon(co.getLon());
						GPSlat.setText(\"\" + co.getLat());
						GPSlon.setText(\"\" + co.getLon());
					}
				}
	
			});
	
			JScrollPane scrollPane = new JScrollPane(jListHistory);
			
	
			JButton deleteBtn = new JButton(\"Delete selected item\");
			deleteBtn.addActionListener(new ActionListener() {
	
				public void actionPerformed(ActionEvent e) {
					historyList.removeElement(jListHistory.getSelectedValue());
					saveHistory();
					putHistoryItemsInList();
				}
	
			});
			
			mapViewer.addMouseListener(new MouseListener() {
	
				public void mouseClicked(MouseEvent e) {
					
					
				}
	
				public void mousePressed(MouseEvent e) {
					if (SwingUtilities.isRightMouseButton(e)) {
						jListHistory.clearSelection();
					}
					
				}
	
				public void mouseReleased(MouseEvent e) {
	
					
				}
	
				public void mouseEntered(MouseEvent e) {
					
				}
	
				public void mouseExited(MouseEvent e) {
					
				}
				
			});
			
			gpsButton.addMouseListener(new java.awt.event.MouseListener() {
	
				public void mouseClicked(java.awt.event.MouseEvent e) {
					try {
				    	double lat = Double.valueOf(GPSlat.getText());
				    	double lon = Double.valueOf(GPSlon.getText());
				    	
				    	addLocationToHistory(lat, lon);		
						
			    	} catch (NumberFormatException e1) {
			    		
			    	}
				}
	
				public void mousePressed(java.awt.event.MouseEvent e) { }
	
				public void mouseReleased(java.awt.event.MouseEvent e) { }
	
				public void mouseEntered(java.awt.event.MouseEvent e) { }
	
				public void mouseExited(java.awt.event.MouseEvent e) { }
				
			});
			
			GridBagLayout historyGrid = new GridBagLayout();
			GridBagConstraints historyConstraints = new GridBagConstraints();
			historyConstraints.gridx = 0;
			historyConstraints.gridy = 0;
			historyGrid.addLayoutComponent(scrollPane, historyConstraints);
	
			historyConstraints = new GridBagConstraints();
			historyConstraints.gridx = 0;
			historyConstraints.gridy = 1;
			historyGrid.addLayoutComponent(deleteBtn, historyConstraints);
	
			historyList = new Vector<HistoryObject>();
			loadHistory();

			scrollPane.setPreferredSize(new Dimension(250,210));
			JPanel panel = new JPanel();
			panel.setLayout(historyGrid);
			panel.add(scrollPane);
			panel.add(deleteBtn);
	
			menuPanelList.put(\"History\", panel);
	}
", "History", true);
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "public void addLocationToHistory(double latitude, double longitude) {

			HistoryObject obj = new HistoryObject(latitude, longitude);
			historyList.add(obj);
	
			putHistoryItemsInList();
			saveHistory();
		}
");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "private void loadHistory() {
			try {
				File f = new File(historyListTxtPath);
	
				if (!f.exists() && !f.isDirectory()) {
					Path path = Paths.get(this.historyListTxtPath);
					f.getParentFile().mkdirs();
					Files.createFile(path);
				}
	
				FileInputStream is = new FileInputStream(f);
	
				if (is.available() > 0) {
					java.io.ObjectInputStream objectInput = new java.io.ObjectInputStream(is);
	
					Vector<HistoryObject> loadedList = (Vector<HistoryObject>) (objectInput.readObject());
					is.close();
					objectInput.close();
	
					historyList.addAll(loadedList);
					putHistoryItemsInList();
	
				}
	
			} catch (IOException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}

		}
");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "private void saveHistory() {
			try {
				File file = new File(historyListTxtPath);
				FileOutputStream fileOutput = new FileOutputStream(file);
				ObjectOutputStream objectOutput = new ObjectOutputStream(fileOutput);
				objectOutput.writeObject(historyList);
				fileOutput.close();
				objectOutput.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
");
	addMember(<class:de.tu_bs.cs.isf.navi.NaviApp>, "private void putHistoryItemsInList() {
			HistoryObject[] historyArray = new HistoryObject[historyList.size()];
			for (int i = 0; i < historyList.size(); i++) {
				HistoryObject historyObj = historyList.get(i);
				historyArray[i] = historyObj;
			}
			this.jListHistory.setListData(historyArray);
		}
");
	addClassifier(<resource:de/tu_bs/cs/isf/navi/history/HistoryObject.java>, "package de.tu_bs.cs.isf.navi.history;
	
		import java.io.Serializable;
		import java.util.Date;
	
		public class HistoryObject implements Serializable {
		
			Date timestamp;
			private double startlongitude;
			private double startlatitude;
			private double endlongitude;
			private double endlatitude;
			private boolean isRoute;
		
			public HistoryObject(double startlatitude, double startlongitude) {
		
				this.startlongitude = startlongitude;
				this.startlatitude = startlatitude;
				this.endlatitude = 0;
				this.endlongitude = 0;
				isRoute = Boolean.FALSE;
				timestamp = new Date(System.currentTimeMillis());
			}
		
			public double getStartlongitude() {
				return startlongitude;
			}
		
			public void setStartlongitude(double startlongitude) {
				this.startlongitude = startlongitude;
			}
		
			public double getStartlatitude() {
				return startlatitude;
			}
		
			public void setStartlatitude(double startlatitude) {
				this.startlatitude = startlatitude;
			}
		
			public double getEndLongitude() {
				return endlongitude;
			}
		
			public void setEndLongitude(double endLongitude) {
				this.endlongitude = endLongitude;
			}
		
			public double getEndlatitude() {
				return endlatitude;
			}
		
			public void setEndlatitude(double endlatitude) {
				this.endlatitude = endlatitude;
			}
		
			public Date getTimestamp() {
				return timestamp;
			}
			
			public boolean isRoute() {
				return isRoute;			
			}
		
			public String toString() {
				return \"<html>\" + timestamp.toString() + \"<br>\" + \" Lat: \" + String.valueOf(startlatitude) + \" Long: \"
							+ String.valueOf(startlongitude) + \"</html>\";	
			}
		
		}");
	}
	