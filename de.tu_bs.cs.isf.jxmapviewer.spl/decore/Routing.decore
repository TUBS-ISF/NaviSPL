 configuration delta "Routing"
	dialect <http://www.emftext.org/java>
		creates <de/tu_bs/cs/isf/navi/routing/RoutingCalculator.java>
		modifies <../src/de/tu_bs/cs/isf/navi/NaviApp.java>
		{
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:org.openstreetmap.gui.jmapviewer.MapMarkerDot>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:de.tu_bs.cs.isf.navi.routing.RoutingInformation>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:java.awt.event.ActionEvent>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <interface:java.awt.event.ActionListener>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:java.awt.Insets>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:javax.swing.JList>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:javax.swing.JScrollPane>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <interface:javax.swing.ListSelectionModel>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:javax.swing.JTextField>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.NaviApp>, <class:javax.swing.JPanel>);
	addField(<class:de.tu_bs.cs.isf.navi.NaviApp>, "routingInformation");
	addModifier(<field:de.tu_bs.cs.isf.navi.NaviApp.routingInformation>, "private");
	setClassifierTypeReference(<field:de.tu_bs.cs.isf.navi.NaviApp.routingInformation>, <class:de.tu_bs.cs.isf.navi.routing.RoutingInformation>);
	addClassMethod(<class:de.tu_bs.cs.isf.navi.NaviApp>, "paintRoute");
	addModifier(<method:de.tu_bs.cs.isf.navi.NaviApp.paintRoute>, "private");
	setPrimitiveTypeReference(<method:de.tu_bs.cs.isf.navi.NaviApp.paintRoute>, "void");
	extendStatementListContainer(<method:de.tu_bs.cs.isf.navi.NaviApp.paintRoute>, "class WrapClass { private void paintRoute() {if (routingInformation.getRoutingInformation().size() <= 1)return;MapMarkerDot m1 = new MapMarkerDot(8.34234, 48.23424);mapViewer.addMapMarker(m1);MapMarkerDot m2 = new MapMarkerDot(8.34423, 48.26424);mapViewer.addMapMarker(m2);}}", 0);
	replaceStatementsInStatementListContainer(<method:de.tu_bs.cs.isf.navi.NaviApp.addMenu1>, "class WrapClass {public void addMenu1() {int q = 25;Insets i = new Insets(q, q, q, q);final JTextField startLatitude = new JTextField();startLatitude.setText(\"52.27111\");final JTextField startLongitude = new JTextField();startLongitude.setText(\"10.53111\");JButton getStartCoords = new JButton(\"GetStart\");getStartCoords.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent e) {MapMarkerDot m = GPSselect;startLatitude.setText(String.valueOf(m.getLat()));startLongitude.setText(String.valueOf(m.getLon()));}});final JTextField endLatitude = new JTextField();endLatitude.setText(\"52.14240\");final JTextField endLongitude = new JTextField();endLongitude.setText(\"10.54840\");JButton getEndCoords = new JButton(\"GetEnd\");getEndCoords.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent e) {MapMarkerDot m = GPSselect;endLatitude.setText(String.valueOf(m.getLat()));endLongitude.setText(String.valueOf(m.getLon()));}});String[] test = {\"Test\", \"Scroll\"};final JList<String> routingList = new JList<String>(test);routingList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);routingList.setLayoutOrientation(JList.VERTICAL);routingList.setVisibleRowCount(-1);JButton startBtn = new JButton(\"Start Routing\");startBtn.setMargin(i);startBtn.addActionListener(new ActionListener() {public void actionPerformed(ActionEvent e) {RoutingCalculator calc = new RoutingCalculator(startLatitude.getText(), startLongitude.getText(),endLatitude.getText(), endLongitude.getText());routingInformation = calc.calculateRoute();if(routingInformation != null) {routingList.clearSelection();routingList.setListData(routingInformation.getRouteInstructions());paintRoute();} else {String[] gehtNicht = new String[] {\"Route kann nicht berechnet werden\"};routingList.setListData(gehtNicht);}}}); JScrollPane listScroller = new JScrollPane(routingList); listScroller.setPreferredSize(new Dimension(250,250));// LayoutJPanel panel = new JPanel();GridBagLayout grid = new GridBagLayout();panel.setLayout(grid);GridBagConstraints conStartLat = new GridBagConstraints();conStartLat.weightx = 1;conStartLat.fill = GridBagConstraints.HORIZONTAL;conStartLat.gridx = 0;conStartLat.gridy = 0;panel.add(startLatitude, conStartLat);GridBagConstraints conStartLong = new GridBagConstraints();conStartLong.weightx = 1;conStartLong.fill = GridBagConstraints.HORIZONTAL;conStartLong.gridx = 1;conStartLong.gridy = 0;panel.add(startLongitude, conStartLong);GridBagConstraints conEndLat = new GridBagConstraints();conEndLat.weightx = 1;conEndLat.fill = GridBagConstraints.HORIZONTAL;conEndLat.gridx = 0;conEndLat.gridy = 1;panel.add(endLatitude, conEndLat);GridBagConstraints conEndLong = new GridBagConstraints();conEndLong.weightx = 1;conEndLong.fill = GridBagConstraints.HORIZONTAL;conEndLong.gridx = 1;conEndLong.gridy = 1;panel.add(endLongitude, conEndLong);GridBagConstraints conStartBtn = new GridBagConstraints();conStartBtn.gridwidth = 3;conStartBtn.fill = GridBagConstraints.HORIZONTAL;conStartBtn.gridx = 0;conStartBtn.gridy = 2;panel.add(startBtn, conStartBtn);GridBagConstraints conList = new GridBagConstraints();conList.gridwidth = 3;conList.fill = GridBagConstraints.HORIZONTAL;conList.gridx = 0;conList.gridy = 3;panel.add(listScroller, conList);GridBagConstraints conSartCoordBtn = new GridBagConstraints();conSartCoordBtn.fill = GridBagConstraints.HORIZONTAL;conSartCoordBtn.gridx = 2;conSartCoordBtn.gridy = 0;panel.add(getStartCoords, conSartCoordBtn);GridBagConstraints conEndCoordBtn = new GridBagConstraints();conEndCoordBtn.fill = GridBagConstraints.HORIZONTAL;conEndCoordBtn.gridx = 2;conEndCoordBtn.gridy = 1;panel.add(getEndCoords, conEndCoordBtn);menuPanelList.put(\"Routing\", panel);}}");
	addClass(<resource:de/tu_bs/cs/isf/navi/routing/RoutingCalculator.java>, "de.tu_bs.cs.isf.navi.routing.RoutingCalculator");
	setPackage(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "de.tu_bs.cs.isf.navi.routing");
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:java.io.BufferedReader>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:java.io.IOException>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:java.io.InputStreamReader>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:java.net.HttpURLConnection>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:java.net.MalformedURLException>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:java.net.URL>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:null>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:null>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:null>);
	addClassifierImport(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, <import:null>);
	addModifier(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "public");
	addField(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "coordinates");
	addModifier(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.coordinates>, "private");
	setClassifierTypeReference(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.coordinates>, <class:java.lang.String>);
	addFieldsInitialValue(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.coordinates>, "class WrapClass {private String coordinates = new String();}");
	addField(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "apiUrl");
	addModifier(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.apiUrl>, "private");
	setClassifierTypeReference(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.apiUrl>, <class:java.lang.String>);
	addFieldsInitialValue(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.apiUrl>, "class WrapClass {private String apiUrl = \"https://api.openrouteservice.org/directions?\";}");
	addField(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "api_keyUrl");
	addModifier(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.api_keyUrl>, "private");
	setClassifierTypeReference(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.api_keyUrl>, <class:java.lang.String>);
	addFieldsInitialValue(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.api_keyUrl>, "class WrapClass {private String api_keyUrl = \"api_key=58d904a497c67e00015b45fc36a9e9b71dbc4ca655f5f2375eebfb67\";}");
	addField(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "profileUrl");
	addModifier(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.profileUrl>, "private");
	setClassifierTypeReference(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.profileUrl>, <class:java.lang.String>);
	addFieldsInitialValue(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.profileUrl>, "class WrapClass {private String profileUrl = \"profile=driving-car\";}");
	addField(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "route");
	addModifier(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.route>, "private");
	(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.route>);
	addField(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "request");
	addModifier(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.request>, "private");
	setClassifierTypeReference(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.request>, <class:java.lang.String>);
	addFieldsInitialValue(<field:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.request>, "class WrapClass {private String request = new String();}");
	addConstructor(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>);
	addOrdinaryParameter(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator()>, "latitudeStart");
	setPrimitiveTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(void);latitudeStart>, "long");
	addOrdinaryParameter(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(long)>, "longitudeStart");
	setPrimitiveTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(long, void);longitudeStart>, "long");
	addOrdinaryParameter(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(long, long)>, "latitudeEnd");
	setPrimitiveTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(long, long, void);latitudeEnd>, "long");
	addOrdinaryParameter(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(long, long, long)>, "longitudeEnd");
	setPrimitiveTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(long, long, long, void);longitudeEnd>, "long");
	addModifier(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(long, long, long, long)>, "public");
	extendStatementListContainer(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(long, long, long, long)>, "class WrapClass {/** * Constructor * @param latitudeStart * @param longitudeStart * @param latitudeEnd * @param longitudeEnd */public RoutingCalculator(long latitudeStart, long longitudeStart, long latitudeEnd, long longitudeEnd) {addCoordinates(latitudeStart, longitudeStart);addCoordinates(latitudeEnd, latitudeEnd);}}", 0);
	addConstructor(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>);
	addOrdinaryParameter(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator()>, "latitudeStart");
	setClassifierTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(void);latitudeStart>, <class:java.lang.String>);
	addOrdinaryParameter(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(String)>, "longitudeStart");
	setClassifierTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(String, void);longitudeStart>, <class:java.lang.String>);
	addOrdinaryParameter(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(String, String)>, "latitudeEnd");
	setClassifierTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(String, String, void);latitudeEnd>, <class:java.lang.String>);
	addOrdinaryParameter(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(String, String, String)>, "longitudeEnd");
	setClassifierTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(String, String, String, void);longitudeEnd>, <class:java.lang.String>);
	addModifier(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(String, String, String, String)>, "public");
	extendStatementListContainer(<constructor:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.RoutingCalculator(String, String, String, String)>, "class WrapClass {public RoutingCalculator(String latitudeStart, String longitudeStart, String latitudeEnd, String longitudeEnd) {try {addCoordinates(Double.parseDouble(latitudeStart), Double.parseDouble(longitudeStart));addCoordinates(Double.parseDouble(latitudeEnd), Double.parseDouble(latitudeEnd));} catch(NumberFormatException e) {e.printStackTrace();}}}", 0);
	addClassMethod(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "addCoordinates");
	addOrdinaryParameter(<method:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.addCoordinates()>, "longitude");
	setPrimitiveTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.addCoordinates(void);longitude>, "double");
	addOrdinaryParameter(<method:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.addCoordinates(double)>, "latitude");
	setPrimitiveTypeReference(<parameter:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.addCoordinates(double, void);latitude>, "double");
	addModifier(<method:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.addCoordinates(double, double)>, "private");
	setPrimitiveTypeReference(<method:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.addCoordinates(double, double)>, "void");
	extendStatementListContainer(<method:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.addCoordinates(double, double)>, "class WrapClass {private void addCoordinates(double longitude, double latitude) {if (coordinates.length() == 0)coordinates += \"coordinates=\" + String.valueOf(longitude) + \",\" + String.valueOf(latitude);elsecoordinates += \"|\" + String.valueOf(longitude) + \",\" + String.valueOf(latitude);}}", 0);
	addClassMethod(<class:de.tu_bs.cs.isf.navi.routing.RoutingCalculator>, "calculateRoute");
	addModifier(<method:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.calculateRoute>, "public");
	(<method:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.calculateRoute>);
	extendStatementListContainer(<method:de.tu_bs.cs.isf.navi.routing.RoutingCalculator.calculateRoute>, "class WrapClass {public RoutingInformation calculateRoute() {try {route = new RoutingInformation();request = apiUrl + api_keyUrl + \"&\" + profileUrl + \"&\" + coordinates;URL url = new URL(request);HttpURLConnection conn = (HttpURLConnection) url.openConnection();conn.setRequestMethod(\"GET\");conn.setRequestProperty(\"accept\", \"application/json\");if (conn.getResponseCode() != 200) {//System.out.println(request);//throw new RuntimeException(\"Failed : HTTP error code : \" + conn.getResponseCode());return null;}BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));String output;System.out.println(\"Output from Server .... \n\");while ((output = br.readLine()) != null) {JSONParser p = new JSONParser();try {JSONObject parsed = (JSONObject) p.parse(output);JSONArray routesArray = (JSONArray) parsed.get(\"routes\");JSONObject routes = (JSONObject) routesArray.get(0);JSONArray segementsArray = (JSONArray) routes.get(\"segments\");JSONObject segments = (JSONObject) segementsArray.get(0);JSONArray stepsArray = (JSONArray) segments.get(\"steps\");for (Object step : stepsArray) {JSONObject JSONstep = (JSONObject) step;Number duration = (Number) JSONstep.get(\"duration\");Number distance = (Number) JSONstep.get(\"distance\");String instruction = (String) JSONstep.get(\"instruction\");String name = (String) JSONstep.get(\"name\");Number type = (Number) JSONstep.get(\"type\");JSONArray wayPointArray = (JSONArray) JSONstep.get(\"way_points\");Number wayPointX = (Number) wayPointArray.get(0);Number wayPointY = (Number) wayPointArray.get(1);RoutingStepInformation newInformation = new RoutingStepInformation(duration, distance,instruction, name, type, wayPointX, wayPointY);route.addStep(newInformation);}} catch (ParseException e) {e.printStackTrace();} catch (ClassCastException e) {e.printStackTrace();} catch (NullPointerException e) {e.printStackTrace();}}conn.disconnect();} catch (MalformedURLException e) {e.printStackTrace();} catch (IOException e) {e.printStackTrace();}return route;}}", 0);
	}
	